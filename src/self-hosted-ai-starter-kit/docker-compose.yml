volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  openwebui-vol:
  prometheus_data:
  grafana_data:


networks:
  demo:

x-n8n: &service-n8n
  build:
    context: .
    dockerfile: Dockerfile.n8n
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=ollama-k:11434
  env_file:
    - .env

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama-k
  networks: ['demo']
  restart: unless-stopped
  expose:
    - "11434"
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama-k
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama-k:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['demo']
    expose:
      - "5432"
    container_name: postgres-k
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import-k
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n-k
    restart: unless-stopped
    expose:
      - "5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    environment:
      # Host y puerto (CRÍTICO para Origin validation)
      - N8N_HOST=localhost
      - N8N_PORT=51234
      - N8N_PROTOCOL=http
      
      # Cookies (sin HTTPS en túnel SSH)
      - N8N_SECURE_COOKIE=false
      
      # URLs base (CRÍTICO para túnel SSH)
      - N8N_EDITOR_BASE_URL=http://localhost:51234
      - WEBHOOK_URL=http://localhost:51234
      
      # Path donde se sirve n8n (por defecto "/")
      - N8N_PATH=/
      
      # Validación de origen
      - N8N_ALLOWED_ORIGINS=http://localhost:51234
      
      # Desactivar validación estricta de protocolo
      - N8N_DISABLE_PROTOCOL_VALIDATION=true
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant-k
    networks: ['demo']
    restart: unless-stopped
    expose:
      - "6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  qdrant-search:
    build:
      context: ../QDRANT
      dockerfile: Dockerfile.qdrant-search
    hostname: qdrant-search
    container_name: qdrant-search-k
    networks: ['demo']
    restart: unless-stopped
    expose:
      - "5000"
    environment:
      - OLLAMA_URL=http://ollama-k:11434
      - QDRANT_URL=http://qdrant-k:6333
    depends_on:
      - qdrant
    profiles: ["cpu", "gpu-nvidia"]

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  openwebui-cpu:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui-cpu-k
    networks: ['demo']
    expose:
      - "8080"
    volumes:
      - openwebui-vol:/app/backend/data
    profiles: ["cpu"]
    restart: unless-stopped

  openwebui-gpu:
    image: ghcr.io/open-webui/open-webui:cuda
    container_name: openwebui-gpu-k
    networks: ['demo']
    expose:
      - "8080"
    volumes:
      - openwebui-vol:/app/backend/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles: ["gpu-nvidia"]
    restart: unless-stopped

  grobid-cpu:
    image: grobid/grobid:0.8.2
    container_name: grobid-k
    networks: ['demo']
    restart: unless-stopped
    expose:
      - "8070"
    ulimits:
      core: 0
    profiles: ["cpu"]

  grobid-gpu:
    image: grobid/grobid:0.8.2
    container_name: grobid-k
    networks: ['demo']
    restart: unless-stopped
    expose:
      - "8070"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
    ulimits:
      core: 0
    profiles: ["gpu-nvidia"]

  # Monitoring Services
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-k
    networks: ['demo']
    expose:
      - "8081"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: unless-stopped
    profiles: ["cpu", "gpu-nvidia"]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-k
    networks: ['demo']
    expose:
      - "9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["cpu", "gpu-nvidia"]

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-k
    networks: ['demo']
    expose:
      - "3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    profiles: ["cpu", "gpu-nvidia"]

  pgadmin:
    image: dpage/pgadmin4
    hostname: pgadmin
    container_name: pgadmin-k
    networks: ['demo']
    restart: unless-stopped
    expose:
      - "80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    depends_on:
      - postgres

  nginx:
    image: nginx:latest
    container_name: nginx-proxy-k
    networks: ['demo']
    ports:
      - "51234:51234"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - n8n